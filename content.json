{"pages":[],"posts":[{"title":"JVM源码编译","text":"以前我很倔强,总以为我就是版本新一点,多折腾一下,兼容还是没问题的直到我编译了jdk. 因为1.8是14年发布的,那个时候的内核版本到现在已经挺老旧了,所以才会带来这么多问题 准备环境(很重要)我不会c语言,遇见编译错误就两眼一抹黑,所以还是方便一点吧,就该是啥环境是啥环境,在努力对兼容性做要求了. 硬件要求 (最低) 4C8T处理器 本人5600G 编译4分钟不到 16G内存 (我亲眼见着我的8G笔记本跑编译蓝屏的 arm架构不兼容再见mac) 不卡的网,jb家的gateway还在beta期,挺卡的,挺多地方有待提升. Ubuntu 18 VMWare虚拟机(ubuntu-18.04.6-desktop-amd64.iso 5.4内核 本人环境) 有坑,源码make时 报fatal error: sys/sysctl.h: No such file or directory, Linux内核必须5.5以下 可以uname -a查看内核版本参考 大概意思是 ,这个库弃用了,5.5开始就删除了,我当时高版本内核是编译不过的,其实还有坑,后边解决 jdk源码 github就有,首推gitee镜像 分支我是[b120](openjdk: OpenJDK做为GPL许可（GPL-licensed）的Java平台的实现，Sun正式发布它已经一年有余 - Gitee.com) 也就是最后一版1.8源码 JDK8 这个apt install 就行了 前置(1.7)或者当前版本(1.8)运行jdk源码用的(毕竟jdk还有很多java写的啊) make -3.8.1 4.0以下吧 ,这个没用高版本的趟过雷 gcc&amp;g++ 根据官方文档，构建jdk8需要gcc 4.3。 装系统装虚拟机直接略过,网上很多教程 配置编译环境​ 能直接粘就直接粘 基本依赖 12## 一行命令 全部粘sudo apt install build-essential libxrender-dev xorg-dev libasound2-dev libcups2-dev gawk zip libxtst-dev libxi-dev libxt-dev gobjc vim net-tools 系统软件包配置推荐参考[华为云](华为开源镜像站_软件开发服务_华为云 (huaweicloud.com)) 首先是安装gcc&amp;g++的4.8版本，但是最新的源没有这个版本了，我们先导入旧版软件源： 1sudo vim /etc/apt/sources.list 在最下方添加旧版源地址并保存： 12deb http://archive.ubuntu.com/ubuntu xenial maindeb http://archive.ubuntu.com/ubuntu xenial universe 接着更新一下apt源信息，并安装gcc和g++： 12sudo apt updatesudo apt install gcc-4.8 g++-4.8 接着配置： 12sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 100sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 100 最后查看版本是为4.8版本： 12gcc --versiong++ --version 接着安装make 3.81版本，需要从官方下载： 1wget https://ftp.gnu.org/gnu/make/make-3.81.tar.gz 下载好之后进行解压，并进入目录： 12tar -zxvf make-3.81.tar.gz cd make-3.81/ 接着我们修改一下代码，打开glob/glob.c文件： 1vim glob/glob.c 1234567#ifdef HAVE_CONFIG_H# include &lt;config.h&gt;#endif#define __alloca alloca &lt;- 添加这一句################################/* Enable GNU extensions in glob.h */# include &lt;sys/stat.h&gt;#define __stat stat &lt;- 添加这一句################################ 改之后这样 接着进行配置并完成编译和安装： 12bash configuresudo make install 安装完成后，将make已经变成3.81版本了： 1make -verison 要开始编译了解压源码： 1unzip jdk-jdk8-b120.zip 接着我们需要安装JetBrains Gateway在我们的服务器上导入项目，这里我们使用CLion后端，等待下载远程后端，这样我们的Linux服务器上虽然没有图形化界面，但是依然可以使用IDEA、CLion等工具，只是服务器上只有后端程序，而界面由我们电脑上的前端程序提供（目前此功能还在Beta阶段，暂不支持arm架构的Linux服务器）整个过程根据服务器配置决定可能需要5-20分钟。 完成之后，我们操作起来就很方便了，界面和IDEA其实差不多，我们打开终端，开始进行配置： 1bash configure --with-debug-level=slowdebug --enable-debug-symbols ZIP_DEBUGINFO_FIELS=0 配置完成后，再次确认是否和教程中的配置信息一致： 12345678910111213141516171819Configuration summary:* Debug level: slowdebug* JDK variant: normal* JVM variants: server* OpenJDK target: OS: linux, CPU architecture: x86, address length: 64Tools summary:* Boot JDK: openjdk version &quot;1.8.0_312&quot; OpenJDK Runtime Environment (build 1.8.0_312-8u312-b07-0ubuntu1~20.04-b07) OpenJDK 64-Bit Server VM (build 25.312-b07, mixed mode) (at /usr/lib/jvm/java-8-openjdk-amd64)* C Compiler: gcc-4.8 (Ubuntu 4.8.5-4ubuntu2) version 4.8.5 (at /usr/bin/gcc-4.8)* C++ Compiler: g++-4.8 (Ubuntu 4.8.5-4ubuntu2) version 4.8.5 (at /usr/bin/g++-4.8)Build performance summary:* Cores to use: 3* Memory limit: 3824 MB* ccache status: not installed (consider installing)WARNING: The result of this configuration has overridden an olderconfiguration. You *should* run 'make clean' to make sure you get aproper build. Failure to do so might result in strange build problems. 接着我们需要修改几个文件，不然一会会编译失败，首先是hotspot/make/linux/Makefile文件： 1vim hotspot/make/linux/Makefile 12原有的 SUPPORTED_OS_VERSION = 2.4% 2.5% 2.6% 3%修改为 SUPPORTED_OS_VERSION = 2.4% 2.5% 2.6% 3% 4% 5% #支持4和5的内核版本 接着是hotspot/make/linux/makefiles/gcc.make文件： 1vim hotspot/make/linux/makefiles/gcc.make 12原有的 WARNINGS_ARE_ERRORS = -Werror修改为 #WARNINGS_ARE_ERRORS = -Werror 接下来:hotspot/make/linux/makefiles/adjust-mflags.sh文件 1vim hotspot/make/linux/makefiles/adjust-mflags.sh 加个大写 I 1234567891011 s/^-/ -/ s/ -\\([^ ][^ ]*\\)j/ -\\1 -j/ s/ -j[0-9][0-9]*/ -j/ s/ -j\\([^ ]\\)/ -j -\\1/ s/ -j/ -j'${HOTSPOT_BUILD_JOBS:-${default_build_jobs}}'/改为 s/^-/ -/ s/ -\\([^ I][^ ]*\\)j/ -\\1 -j/ s/ -j[0-9][0-9]*/ -j/ s/ -j\\([^ ]\\)/ -j -\\1/ s/ -j/ -j'${HOTSPOT_BUILD_JOBS:-${default_build_jobs}}'/ 接着是nashorn/make/BuildNashorn.gmk文件： 12345 $(CP) -R -p $(NASHORN_OUTPUTDIR)/nashorn_classes/* $(@D)/ $(FIXPATH) $(JAVA) \\原有的 -cp &quot;$(NASHORN_OUTPUTDIR)/nasgen_classes$(PATH_SEP)$(NASHORN_OUTPUTDIR)/nashorn_classes&quot; \\修改为 -Xbootclasspath/p:&quot;$(NASHORN_OUTPUTDIR)/nasgen_classes$(PATH_SEP)$(NASHORN_OUTPUTDIR)/nashorn_classes&quot; \\ jdk.nashorn.internal.tools.nasgen.Main $(@D) jdk.nashorn.internal.objects $(@D) OK，修改完成，接着我们就可以开始编译了： 1make all 整个编译过程大概需要持续10-20分钟，请耐心等待。构建完成后提示： 1Finished building OpenJDK for target 'all' 当然难免可能有的同学出现了奇奇怪怪的问题，加油，慢慢折腾，总会成功的~","link":"/2023/04/23/JVM%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"}],"tags":[],"categories":[]}